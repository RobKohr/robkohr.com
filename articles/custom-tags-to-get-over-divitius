
        <html>
            <head>
                <title>Custom tags to get over divitius - RobKohr's Blog</title>

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-600316-3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag() {
    dataLayer.push(arguments);
  }
  gtag("js", new Date());

  gtag("config", "UA-600316-3");
</script>

<link rel="alternate" type="application/rss+xml" title="RobKohr's Blog" href="rss.xml" />
<link rel="shortcut icon" type="image/ico" href="favicon.ico">
<link rel="stylesheet" href="libs/highlight/styles/dark.min.css">
<script src="libs/highlight/highlight.min.js"></script>

                <link rel="canonical" href="https://robkohr.com/articles/custom-tags-to-get-over-divitius" />
                <link rel="stylesheet" href="../neat.css">
                <base href="../">
            </head>
            <body>
            <a href="./index.html">&larr; Home</a>
            
    <h2><a href="articles/custom-tags-to-get-over-divitius">Custom tags to get over divitius</a></h2>
    <div class="variables">
    <div class="date">@date=2023-08-03</div>
    <div class="tags">@tags=<a href="tags/html">html</a></div>
    </div>
    <article>
        <p>(note: update at end as there some issues with method)</p>
<p>Very often html looks like a soup of divs in projects</p>
<pre><code>&lt;div class=&quot;item&quot;&gt;
    &lt;div class=&quot;name&quot;&gt;Toothpaste&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Used to clean teeth&lt;/div&gt;
    &lt;div class=&quot;price&quot;&gt;$20&lt;/div&gt;
    &lt;div class=&quot;actions&quot;&gt;&lt;button&gt;add to cart&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>Instead this could look like</p>
<pre><code>&lt;item&gt;
    &lt;name&gt;Toothpaste&lt;/name&gt;
    &lt;description&gt;Used to clean teeth&lt;/description&gt;
    &lt;price&gt;$20&lt;/price&gt;
    &lt;actions&gt;&lt;button&gt;add to cart&lt;/actions&gt;
&lt;/item&gt;
</code></pre>
<p>That looks so much better. These are custom element names, and can be used in html. Note that while custom element names &lt;should-have-hyphens&gt; according to the spec (so as to avoid conflicts with future html element names), modern browsers will handle them fine without the hyphens.</p>
<p>One thing you will realize once you start using them is that they are by default <code>display-inline</code>, which is a hassle as you typically want them to be display:block by default as you will be using them to replace divs. </p>
<p>You can handle this by starting out your css for your site like this:</p>
<pre><code class="language-css">body * {
    display: block;
  }

  /* Revert all of the inline elements back to inline */
  a,
  abbr,
  acronym,
  b,
  bdo,
  big,
  br,
  button,
  cite,
  code,
  dfn,
  em,
  i,
  img,
  input,
  kbd,
  label,
  map,
  object,
  output,
  q,
  samp,
  select,
  small,
  span,
  strong,
  sub,
  sup,
  textarea,
  time,
  tt,
  var {
    display: inline;
  }
</code></pre>
<h3>UPDATE</h3>
<p>After looking further into this, it turns out to be a horrible idea. Many native dom elements have a lot more variety in display settings and to do it the way I am here would need lots of catching for edge cases. For more details:</p>
<p><a href="https://html.spec.whatwg.org/multipage/rendering.html">html.spec.whatwg.org/multipage/rendering.html</a>.</p>
<p>In the end, it is best to just selectively give elements you create the display: block styling as needed. Tedious, but less likely to cause issues. </p>
<p>You could also do something where only elements under a classed element get styled by default. This is done in scss so that the code is shorter:</p>
<pre><code class="language-scss">.auto-display-block-decendents * {
    display: block;
  }
.auto-display-block-decendents{
  /* Revert all of the inline elements back to inline */
  a,
  abbr,
  acronym,
  b,
  bdo,
  big,
  br,
  button,
  cite,
  code,
  dfn,
  em,
  i,
  img,
  input,
  kbd,
  label,
  map,
  object,
  output,
  q,
  samp,
  select,
  small,
  span,
  strong,
  sub,
  sup,
  textarea,
  time,
  tt,
  var {
    display: inline;
  }
}
</code></pre>
<p>This list isn&#39;t exhaustive, and if you use things like tables, you will need to do re-apply proper styling, but you could use derivatives of this to just apply to isolated components and tweak the exceptions for those cases.</p>

    </article>
    
            </body>
          </html>
          